//
//  MEWconnectSignatureTests.swift
//  MEWwalletKitTests
//
//  Created by Mikhail Nikanorov on 7/24/19.
//  Copyright Â© 2019 MyEtherWallet Inc. All rights reserved.
//

import Quick
import Nimble
@testable import MEWwalletKit
import libsecp256k1

class MEWconnectSignatureTests: QuickSpec {
  override func spec() {
    describe("MEWconnect signature test") {
      it("should sign personal message data correctly") {
        let testMessage = Data([0xe2, 0x45, 0x10, 0x93, 0x83, 0xa4, 0x80, 0xc0, 0x86, 0x80, 0x18, 0xca, 0x92, 0x8c, 0xbe, 0xd5, 0x77, 0x21, 0x39, 0xa4, 0x31, 0x04, 0x7f, 0xef,
                                0xb5, 0xc5, 0xf0, 0x46, 0x59, 0x24, 0x65, 0x75])
        let testPrivateKey = Data([0x41, 0xd1, 0xc8, 0xf0, 0xd3, 0x78, 0x1e, 0x50, 0xf8, 0x49, 0x96, 0xfc, 0x65, 0x5e, 0xe5, 0x64, 0x98, 0x2a, 0x88, 0xbe, 0x8d, 0xa4, 0x95, 0x2d,
                                   0x9e, 0xdd, 0xb5, 0x16, 0xdb, 0x06, 0xd5, 0x88])
        let testRecoverableSignature = Data([0x35, 0x38, 0x1f, 0x1e, 0x79, 0x6d, 0x53, 0xf4, 0x60, 0x47, 0xce, 0xfc, 0x8d, 0x40, 0x0b, 0xb2, 0xac, 0x51, 0x7e, 0xcf, 0xde, 0x9b,
                                             0xb0, 0xab, 0x1f, 0x84, 0x59, 0x22, 0x84, 0xf3, 0x08, 0x31, 0x02, 0xca, 0x22, 0xb8, 0xfb, 0x2c, 0xe0, 0x54, 0x82, 0x01, 0x9d, 0xf0,
                                             0x2c, 0xa9, 0xfc, 0x65, 0x26, 0x53, 0xdd, 0x07, 0xb5, 0xbe, 0xdb, 0x8c, 0x48, 0x86, 0x24, 0x1a, 0x86, 0x77, 0xdd, 0x41, 0x01])
        let testSerializedRecoverableSignature = Data([0x31, 0x08, 0xf3, 0x84, 0x22, 0x59, 0x84, 0x1f, 0xab, 0xb0, 0x9b, 0xde, 0xcf, 0x7e, 0x51, 0xac, 0xb2, 0x0b, 0x40, 0x8d, 0xfc,
                                                       0xce, 0x47, 0x60, 0xf4, 0x53, 0x6d, 0x79, 0x1e, 0x1f, 0x38, 0x35, 0x41, 0xdd, 0x77, 0x86, 0x1a, 0x24, 0x86, 0x48, 0x8c, 0xdb,
                                                       0xbe, 0xb5, 0x07, 0xdd, 0x53, 0x26, 0x65, 0xfc, 0xa9, 0x2c, 0xf0, 0x9d, 0x01, 0x82, 0x54, 0xe0, 0x2c, 0xfb, 0xb8, 0x22, 0xca,
                                                       0x02, 0x01])
        
        guard let context = secp256k1_context_create(UInt32(SECP256K1_CONTEXT_SIGN)) else {
          fail("Can't create secp256k1 context")
          return
        }
        
        var recoverableSignature = testMessage.secp256k1RecoverableSign(privateKey: testPrivateKey, context: context)
        guard let recoverableSignatureData = recoverableSignature?.data() else {
          fail("Can't get signature data")
          return
        }
        expect(testRecoverableSignature) == recoverableSignatureData
        
        guard let serializedRecoverableSignature = recoverableSignature?.serialized(context: context) else {
          fail("Can't serialize signature")
          return
        }
        expect(testSerializedRecoverableSignature) == serializedRecoverableSignature
      
//        siga: 3108f384 2259841f abb09bde cf7e51ac b20b408d fcce4760 f4536d79 1e1f3835 41dd7786 1a248648 8cdbbeb5 07dd5326 65fca92c f09d0182 54e02cfb b822ca02 00
//              3108f384 2259841f abb09bde cf7e51ac b20b408d fcce4760 f4536d79 1e1f3835 41dd7786 1a248648 8cdbbeb5 07dd5326 65fca92c f09d0182 54e02cfb b822ca02 01
        //          3108f3 84225984 1fabb09b decf7e51 acb20b40 8dfcce47 60f4536d 791e1f38 3541dd77 861a2486 488cdbbe b507dd53 2665fca9 2cf09d01 8254e02c fbb822ca 0201
//        result: 1c3108f3 84225984 1fabb09b decf7e51 acb20b40 8dfcce47 60f4536d 791e1f38 3541dd77 861a2486 488cdbbe b507dd53 2665fca9 2cf09d01 8254e02c fbb822ca 02
      }
    }
  }
}
